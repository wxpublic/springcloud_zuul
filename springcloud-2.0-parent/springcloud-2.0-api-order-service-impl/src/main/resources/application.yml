###会员项目服务启动端口号
server:
  port: 8050
###服务名称(注册到eureka注册中心的名称)
spring:
  application:
    name: app-itmayiedu-order
###服务注册的注册中心指向URL(注册到eureka服务地址)
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8100/eureka

    ###是否将自己注册到注册中心（相当于开关）
    register-with-eureka: true
    ###是否需要从eureka上获取注册信息
    fetch-registry: true

# 心跳检测与续约时间，开发环境时将值设置设置小些，保证服务关闭后注册中心能及时踢出服务
#  instance:
#    #Eureka客户端向服务端发送心跳的时间间隔，单位为秒（客户端告诉服务端自己会按照该规则）
#    lease-renewal-interval-in-seconds: 1
#    #Eureka服务端在收到最后一次心跳之后等待的时间上限，单位为秒，超过则剔除（客户端告诉服务端按照此规则等待自己）
#    lease-expiration-duration-in-seconds: 2

###设置feign客户端超时时间（此处为全局变量配置模式，还可局部配置）
ribbon: # 默认浏览器调用某服务，超过1秒后没有返回结果，系统将返回超时异常。下面两属性显式加大参数值
  ###请求处理的超时时间 下级服务响应最大时间,超出时间消费方（路由也是消费方）返回timeout
  ReadTimeout: 10000
  ###ribbon请求连接的超时时间- 限制3秒内必须请求到服务，并不限制服务处理的返回时间
  ConnectTimeout: 10000

# 开启断路器Hystrix
feign:
  hystrix:
    enabled: true
# hystrix禁止服务超时时间,注意：生产服务可不要随便禁止。使用Hystrix需要设置服务调用超时时间，这个和ribbon全局超时是两码事；
# 默认超时也是1秒，可以设大一点，也可以直接设置关闭超时异常提示开关；
hystrix:
  command:
    default:
      execution:
        # 禁止hystrix服务超时异常提示功能
#        timeout:
#          enabled: false
        # 设置hystrix服务返回超时等待时长（不设置：默认为1秒）
        isolation:
          thread:
#            timeoutInMilliseconds: 10000
            timeoutInMilliseconds: 1000

